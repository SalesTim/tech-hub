(window.webpackJsonp=window.webpackJsonp||[]).push([[205],{760:function(t,e,r){"use strict";r.r(e);var s=r(26),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"throttling-guidance"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#throttling-guidance"}},[t._v("#")]),t._v(" Throttling Guidance")]),t._v(" "),r("p",[r("strong",[t._v("ABSTRACT")]),r("br"),t._v("\nThrottling limits the number of concurrent calls to a service to prevent overuse of resources. SalesTim API is designed to handle a high volume of requests. If an overwhelming number of requests occurs, throttling helps maintain optimal performance and reliability of the SalesTim API service."),r("br"),t._v("\nThrottling limits vary based on the scenario. For example, if you are performing a large volume of writes, the possibility for throttling is higher than if you are only performing reads.")]),t._v(" "),r("hr"),t._v(" "),r("p",[r("strong",[t._v("TABLE OF CONTENTS")]),r("br")]),r("div",{staticClass:"table-of-contents"},[r("ul",[r("li",[r("a",{attrs:{href:"#what-happens-when-throttling-occurs"}},[t._v("What happens when throttling occurs?")])]),r("li",[r("a",{attrs:{href:"#common-throttling-scenarios"}},[t._v("Common throttling scenarios")])]),r("li",[r("a",{attrs:{href:"#best-practices-to-avoid-throttling"}},[t._v("Best practices to avoid throttling")])]),r("li",[r("a",{attrs:{href:"#best-practices-to-handle-throttling"}},[t._v("Best practices to handle throttling")])])])]),r("p"),t._v(" "),r("hr"),t._v(" "),r("h2",{attrs:{id:"what-happens-when-throttling-occurs"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#what-happens-when-throttling-occurs"}},[t._v("#")]),t._v(" What happens when throttling occurs?")]),t._v(" "),r("p",[t._v("When a throttling threshold is exceeded, SalesTim API limits any further requests from that client for a period of time. When throttling occurs, SalesTim API returns HTTP status code 429 (Too many requests), and the requests fail. A suggested wait time is returned in the response header of the failed request.")]),t._v(" "),r("p",[t._v("SalesTim API is conforming to the "),r("a",{attrs:{href:"https://tools.ietf.org/id/draft-polli-ratelimit-headers-01.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("IETF ratelimit standardization proposal"),r("OutboundLink")],1),t._v(".")]),t._v(" "),r("blockquote",[r("p",[t._v("Note: Throttling behavior can depend on the type and number of requests. For example, if you have a high volume of requests, all requests types are throttled. Threshold limits vary based on the request type. Therefore, you could encounter a scenario where writes are throttled but reads are still permitted.")])]),t._v(" "),r("h2",{attrs:{id:"common-throttling-scenarios"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#common-throttling-scenarios"}},[t._v("#")]),t._v(" Common throttling scenarios")]),t._v(" "),r("p",[t._v("The most common causes of throttling of clients include:")]),t._v(" "),r("ul",[r("li",[t._v("A large number of requests across all applications in a our environments.")]),t._v(" "),r("li",[t._v("A large number of requests from a particular application across all environments.")])]),t._v(" "),r("h2",{attrs:{id:"best-practices-to-avoid-throttling"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#best-practices-to-avoid-throttling"}},[t._v("#")]),t._v(" Best practices to avoid throttling")]),t._v(" "),r("p",[t._v("Programming patterns like continuously polling a resource to check for updates and regularly scanning resource collections to check for new or deleted resources are more likely to lead to applications being throttled and degrade overall performances.")]),t._v(" "),r("p",[t._v("Before any throttling, SalesTim API provides two useful headers included in every responses so that you can monitor your own activity level:")]),t._v(" "),r("ul",[r("li",[r("code",[t._v("X-RateLimit-Limit")]),t._v(': The limit of requests in a perdiod of time (aka "window")')]),t._v(" "),r("li",[r("code",[t._v("X-RateLimit-Remaining")]),t._v(": The current number of requests that could be made during the current window.")])]),t._v(" "),r("h2",{attrs:{id:"best-practices-to-handle-throttling"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#best-practices-to-handle-throttling"}},[t._v("#")]),t._v(" Best practices to handle throttling")]),t._v(" "),r("p",[t._v("The following are best practices for handling throttling:")]),t._v(" "),r("ul",[r("li",[t._v("Reduce the number of operations per request.")]),t._v(" "),r("li",[t._v("Reduce the frequency of calls.")]),t._v(" "),r("li",[t._v("Avoid immediate retries, because all requests accrue against your usage limits.")])]),t._v(" "),r("p",[t._v("When you implement error handling, use the HTTP error code 429 to detect throttling. The failed response includes the "),r("code",[t._v("Retry-After")]),t._v(" response header. Backing off requests using the "),r("code",[t._v("Retry-After")]),t._v(" delay is the fastest way to recover from throttling because SalesTim API continues to log resource usage while a client is being throttled.")]),t._v(" "),r("ol",[r("li",[t._v("Wait the number of seconds specified in the "),r("code",[t._v("Retry-After")]),t._v(" header.")]),t._v(" "),r("li",[t._v("Retry the request.")]),t._v(" "),r("li",[t._v("If the request fails again with a 429 error code, you are still being throttled. Continue to use the recommended "),r("code",[t._v("Retry-After")]),t._v(" delay and retry the request until it succeeds.")])]),t._v(" "),r("blockquote",[r("p",[t._v("If no "),r("code",[t._v("Retry-After")]),t._v(" header is provided by the response, we recommend implementing an exponential backoff retry policy.")])]),t._v(" "),r("p",[t._v("In addition to the "),r("code",[t._v("Retry-After")]),t._v(" header, SalesTim API includes "),r("code",[t._v("X-RateLimit-Limit")]),t._v(" and "),r("code",[t._v("X-RateLimit-Remaining")]),t._v(" infos in body of the  throttled response:")]),t._v(" "),r("div",{staticClass:"language-yaml extra-class"},[r("pre",{pre:!0,attrs:{class:"language-yaml"}},[r("code",[r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("message")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Too many requests, please try again later...'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("body")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("rateLimitExceeded")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),r("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tier")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Tier 1'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("              "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Could be 'Tier 1', 'Tier 2' or 'Tier 3'")]),t._v("\n      "),r("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("rateLimitWindow")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("900000")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("     "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# In ms")]),t._v("\n      "),r("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ratelimitMax")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("              "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# In # of requests")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),r("Classification",{attrs:{label:"public"}})],1)}),[],!1,null,null,null);e.default=a.exports}}]);