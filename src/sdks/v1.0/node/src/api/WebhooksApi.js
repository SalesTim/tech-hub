/**
 * SalesTim API
 * The unified Microsoft Teams Governance API. Visit our [Tech Hub](https://developers.salestim.com/api/) for more information. 
 *
 * The version of the OpenAPI document: 1.2.3
 * Contact: support@salestim.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiError from '../model/ApiError';
import Hook from '../model/Hook';
import HookPayload from '../model/HookPayload';
import HookSignature from '../model/HookSignature';
import HookSignatureRequest from '../model/HookSignatureRequest';
import HooksEvents from '../model/HooksEvents';

/**
* Webhooks service.
* @module api/WebhooksApi
* @version 1.2.3
*/
export default class WebhooksApi {

    /**
    * Constructs a new WebhooksApi. 
    * @alias module:api/WebhooksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createHook operation.
     * @callback module:api/WebhooksApi~createHookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Hook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new webhook
     * Create a new webhook. TIER 2️⃣ | ROLES - AUTHENTICATED_USER.
     * @param {module:model/HookPayload} hookPayload A HookPayload object.
     * @param {module:api/WebhooksApi~createHookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Hook}
     */
    createHook(hookPayload, callback) {
      let postBody = hookPayload;
      // verify the required parameter 'hookPayload' is set
      if (hookPayload === undefined || hookPayload === null) {
        throw new Error("Missing the required parameter 'hookPayload' when calling createHook");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Hook;
      return this.apiClient.callApi(
        '/hooks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteHook operation.
     * @callback module:api/WebhooksApi~deleteHookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Hook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a webhook
     * Delete a webhook. TIER 2️⃣ | ROLES - AUTHENTICATED_USER.
     * @param {String} hookId ID of the webhook to be deleted.
     * @param {module:api/WebhooksApi~deleteHookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Hook}
     */
    deleteHook(hookId, callback) {
      let postBody = null;
      // verify the required parameter 'hookId' is set
      if (hookId === undefined || hookId === null) {
        throw new Error("Missing the required parameter 'hookId' when calling deleteHook");
      }

      let pathParams = {
        'hookId': hookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Hook;
      return this.apiClient.callApi(
        '/hooks/{hookId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generateHookSignature operation.
     * @callback module:api/WebhooksApi~generateHookSignatureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HookSignature} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate a signature from a secret and a webhook payload
     * Generate a signature from a secret and a webhook payload. TIER 3️⃣ | ROLES - AUTHENTICATED_USER.
     * @param {module:model/HookSignatureRequest} hookSignatureRequest A HookSignatureRequest object comprised of the secret and payload.
     * @param {module:api/WebhooksApi~generateHookSignatureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HookSignature}
     */
    generateHookSignature(hookSignatureRequest, callback) {
      let postBody = hookSignatureRequest;
      // verify the required parameter 'hookSignatureRequest' is set
      if (hookSignatureRequest === undefined || hookSignatureRequest === null) {
        throw new Error("Missing the required parameter 'hookSignatureRequest' when calling generateHookSignature");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HookSignature;
      return this.apiClient.callApi(
        '/hooks/signature', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHooksEvents operation.
     * @callback module:api/WebhooksApi~getHooksEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HooksEvents} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get webhooks events
     * Get webhooks events. TIER 3️⃣ | ROLES - AUTHENTICATED_USER.
     * @param {module:api/WebhooksApi~getHooksEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HooksEvents}
     */
    getHooksEvents(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HooksEvents;
      return this.apiClient.callApi(
        '/hooks/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
