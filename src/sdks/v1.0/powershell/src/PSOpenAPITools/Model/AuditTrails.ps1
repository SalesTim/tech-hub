#
# SalesTim API
# The unified Microsoft Teams Governance API. Visit our [Tech Hub](https://developers.salestim.com/api/) for more information. 
# Version: 1.2.1
# Contact: support@salestim.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

A collection of SalesTim audit trails.

.PARAMETER OdataContext
Odata context
.PARAMETER OdataCount
Number of audit trails in the collection
.PARAMETER Value
Array of audit trails
.OUTPUTS

AuditTrails<PSCustomObject>
#>

function Initialize-AuditTrails {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OdataContext},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${OdataCount},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Value}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => AuditTrails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "@odata.context" = ${OdataContext}
            "@odata.count" = ${OdataCount}
            "value" = ${Value}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AuditTrails<PSCustomObject>

.DESCRIPTION

Convert from JSON to AuditTrails<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AuditTrails<PSCustomObject>
#>
function ConvertFrom-JsonToAuditTrails {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => AuditTrails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AuditTrails
        $AllProperties = ("@odata.context", "@odata.count", "value")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "@odata.context"))) { #optional property not found
            $OdataContext = $null
        } else {
            $OdataContext = $JsonParameters.PSobject.Properties["@odata.context"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "@odata.count"))) { #optional property not found
            $OdataCount = $null
        } else {
            $OdataCount = $JsonParameters.PSobject.Properties["@odata.count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "value"))) { #optional property not found
            $Value = $null
        } else {
            $Value = $JsonParameters.PSobject.Properties["value"].value
        }

        $PSO = [PSCustomObject]@{
            "@odata.context" = ${OdataContext}
            "@odata.count" = ${OdataCount}
            "value" = ${Value}
        }

        return $PSO
    }

}

