#
# SalesTim API
# The unified Microsoft Teams Governance API. Visit our [Tech Hub](https://developers.salestim.com/api/) for more information. 
# Version: 1.2.3
# Contact: support@salestim.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Properties of the team to be created

.PARAMETER Name
Requested team name
.PARAMETER Description
Requested team description
.PARAMETER WelcomeMessage
Requested team welcome message
.PARAMETER Membership
No description available.
.OUTPUTS

TeamProvisioningRequestTeam<PSCustomObject>
#>

function Initialize-TeamProvisioningRequestTeam {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${WelcomeMessage},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Membership}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => TeamProvisioningRequestTeam' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Name -eq $null) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "welcomeMessage" = ${WelcomeMessage}
            "membership" = ${Membership}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to TeamProvisioningRequestTeam<PSCustomObject>

.DESCRIPTION

Convert from JSON to TeamProvisioningRequestTeam<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

TeamProvisioningRequestTeam<PSCustomObject>
#>
function ConvertFrom-JsonToTeamProvisioningRequestTeam {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => TeamProvisioningRequestTeam' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in TeamProvisioningRequestTeam
        $AllProperties = ("name", "description", "welcomeMessage", "membership")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'name' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "welcomeMessage"))) { #optional property not found
            $WelcomeMessage = $null
        } else {
            $WelcomeMessage = $JsonParameters.PSobject.Properties["welcomeMessage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "membership"))) { #optional property not found
            $Membership = $null
        } else {
            $Membership = $JsonParameters.PSobject.Properties["membership"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "welcomeMessage" = ${WelcomeMessage}
            "membership" = ${Membership}
        }

        return $PSO
    }

}

