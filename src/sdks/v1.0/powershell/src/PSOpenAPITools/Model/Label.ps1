#
# SalesTim API
# The unified Microsoft Teams Governance API. Visit our [Tech Hub](https://developers.salestim.com/api/) for more information. 
# Version: 1.2.1
# Contact: support@salestim.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

A Microsoft 365 sensitivity label.

.PARAMETER Id
Label ID
.PARAMETER Name
Label name
.PARAMETER Description
Label description
.PARAMETER Color
Label color
.PARAMETER Sensitivity
Label sensitivity
.PARAMETER Tooltip
Label tooltip
.PARAMETER IsActive
Is label active
.PARAMETER Parent
Parent label
.OUTPUTS

Label<PSCustomObject>
#>

function Initialize-Label {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Color},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Sensitivity},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Tooltip},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsActive},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Parent}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Label' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "description" = ${Description}
            "color" = ${Color}
            "sensitivity" = ${Sensitivity}
            "tooltip" = ${Tooltip}
            "isActive" = ${IsActive}
            "parent" = ${Parent}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Label<PSCustomObject>

.DESCRIPTION

Convert from JSON to Label<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Label<PSCustomObject>
#>
function ConvertFrom-JsonToLabel {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Label' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Label
        $AllProperties = ("id", "name", "description", "color", "sensitivity", "tooltip", "isActive", "parent")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "color"))) { #optional property not found
            $Color = $null
        } else {
            $Color = $JsonParameters.PSobject.Properties["color"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sensitivity"))) { #optional property not found
            $Sensitivity = $null
        } else {
            $Sensitivity = $JsonParameters.PSobject.Properties["sensitivity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tooltip"))) { #optional property not found
            $Tooltip = $null
        } else {
            $Tooltip = $JsonParameters.PSobject.Properties["tooltip"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isActive"))) { #optional property not found
            $IsActive = $null
        } else {
            $IsActive = $JsonParameters.PSobject.Properties["isActive"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "parent"))) { #optional property not found
            $Parent = $null
        } else {
            $Parent = $JsonParameters.PSobject.Properties["parent"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "description" = ${Description}
            "color" = ${Color}
            "sensitivity" = ${Sensitivity}
            "tooltip" = ${Tooltip}
            "isActive" = ${IsActive}
            "parent" = ${Parent}
        }

        return $PSO
    }

}

