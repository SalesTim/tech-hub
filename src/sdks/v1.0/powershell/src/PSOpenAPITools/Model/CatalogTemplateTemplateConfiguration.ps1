#
# SalesTim API
# The unified Microsoft Teams Governance API. Visit our [Tech Hub](https://developers.salestim.com/api/) for more information. 
# Version: 1.2.3
# Contact: support@salestim.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Information about the template and its related policies

.PARAMETER Id
Template ID.
.PARAMETER Name
Template Name.
.PARAMETER Description
Template Description.
.PARAMETER PictureUrl
Template Picture URL.
.PARAMETER Language
Template Language (e.g. 'en-US').
.PARAMETER Enabled
Defines if the template is enabled or not, and therefore available for end-users or not.
.PARAMETER System
Defines if the template should be considered as 'system', and therefore could not be deleted, exported...
.PARAMETER Singleton
Defines if the template should restrict the number of associated teams created from itself to one.
.PARAMETER DomId
Unique identifier that could be used safely client-side to identify an HTML tag.
.PARAMETER Approval
No description available.
.PARAMETER PermanentMembership
No description available.
.PARAMETER AudienceTargeting
No description available.
.OUTPUTS

CatalogTemplateTemplateConfiguration<PSCustomObject>
#>

function Initialize-CatalogTemplateTemplateConfiguration {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PictureUrl},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Language},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Enabled},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${System},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Singleton},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DomId},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Approval},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${PermanentMembership},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${AudienceTargeting}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CatalogTemplateTemplateConfiguration' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "description" = ${Description}
            "pictureUrl" = ${PictureUrl}
            "language" = ${Language}
            "enabled" = ${Enabled}
            "system" = ${System}
            "singleton" = ${Singleton}
            "domId" = ${DomId}
            "approval" = ${Approval}
            "permanentMembership" = ${PermanentMembership}
            "audienceTargeting" = ${AudienceTargeting}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CatalogTemplateTemplateConfiguration<PSCustomObject>

.DESCRIPTION

Convert from JSON to CatalogTemplateTemplateConfiguration<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CatalogTemplateTemplateConfiguration<PSCustomObject>
#>
function ConvertFrom-JsonToCatalogTemplateTemplateConfiguration {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CatalogTemplateTemplateConfiguration' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CatalogTemplateTemplateConfiguration
        $AllProperties = ("id", "name", "description", "pictureUrl", "language", "enabled", "system", "singleton", "domId", "approval", "permanentMembership", "audienceTargeting")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pictureUrl"))) { #optional property not found
            $PictureUrl = $null
        } else {
            $PictureUrl = $JsonParameters.PSobject.Properties["pictureUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "language"))) { #optional property not found
            $Language = $null
        } else {
            $Language = $JsonParameters.PSobject.Properties["language"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enabled"))) { #optional property not found
            $Enabled = $null
        } else {
            $Enabled = $JsonParameters.PSobject.Properties["enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "system"))) { #optional property not found
            $System = $null
        } else {
            $System = $JsonParameters.PSobject.Properties["system"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "singleton"))) { #optional property not found
            $Singleton = $null
        } else {
            $Singleton = $JsonParameters.PSobject.Properties["singleton"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "domId"))) { #optional property not found
            $DomId = $null
        } else {
            $DomId = $JsonParameters.PSobject.Properties["domId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "approval"))) { #optional property not found
            $Approval = $null
        } else {
            $Approval = $JsonParameters.PSobject.Properties["approval"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "permanentMembership"))) { #optional property not found
            $PermanentMembership = $null
        } else {
            $PermanentMembership = $JsonParameters.PSobject.Properties["permanentMembership"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "audienceTargeting"))) { #optional property not found
            $AudienceTargeting = $null
        } else {
            $AudienceTargeting = $JsonParameters.PSobject.Properties["audienceTargeting"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "description" = ${Description}
            "pictureUrl" = ${PictureUrl}
            "language" = ${Language}
            "enabled" = ${Enabled}
            "system" = ${System}
            "singleton" = ${Singleton}
            "domId" = ${DomId}
            "approval" = ${Approval}
            "permanentMembership" = ${PermanentMembership}
            "audienceTargeting" = ${AudienceTargeting}
        }

        return $PSO
    }

}

