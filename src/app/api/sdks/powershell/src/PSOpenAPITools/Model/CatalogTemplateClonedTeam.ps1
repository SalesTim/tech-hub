#
# SalesTim API
# The unified Microsoft Teams Governance API. Visit our [Tech Hub](https://developers.salestim.com/api/) for more information. 
# Version: 1.2.0
# Contact: support@salestim.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Properties of the source team that should be cloned.

.PARAMETER TeamId
Source team ID.
.PARAMETER TeamName
Source team name.
.PARAMETER IncludeApps
Defines if apps should be cloned from the source team.
.PARAMETER IncludeTabs
Defines if tabs should be cloned from the source team.
.PARAMETER IncludeSettings
Defines if the team settings should be cloned from the source team.
.PARAMETER IncludeChannels
Defines if channels should be cloned from the source team.
.PARAMETER IncludeMembers
Defines if membership (members and owners) should be cloned from the source team.
.OUTPUTS

CatalogTemplateClonedTeam<PSCustomObject>
#>

function Initialize-CatalogTemplateClonedTeam {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TeamId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TeamName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IncludeApps},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IncludeTabs},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IncludeSettings},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IncludeChannels},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IncludeMembers}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CatalogTemplateClonedTeam' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "teamId" = ${TeamId}
            "teamName" = ${TeamName}
            "includeApps" = ${IncludeApps}
            "includeTabs" = ${IncludeTabs}
            "includeSettings" = ${IncludeSettings}
            "includeChannels" = ${IncludeChannels}
            "includeMembers" = ${IncludeMembers}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CatalogTemplateClonedTeam<PSCustomObject>

.DESCRIPTION

Convert from JSON to CatalogTemplateClonedTeam<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CatalogTemplateClonedTeam<PSCustomObject>
#>
function ConvertFrom-JsonToCatalogTemplateClonedTeam {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CatalogTemplateClonedTeam' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CatalogTemplateClonedTeam
        $AllProperties = ("teamId", "teamName", "includeApps", "includeTabs", "includeSettings", "includeChannels", "includeMembers")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "teamId"))) { #optional property not found
            $TeamId = $null
        } else {
            $TeamId = $JsonParameters.PSobject.Properties["teamId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "teamName"))) { #optional property not found
            $TeamName = $null
        } else {
            $TeamName = $JsonParameters.PSobject.Properties["teamName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "includeApps"))) { #optional property not found
            $IncludeApps = $null
        } else {
            $IncludeApps = $JsonParameters.PSobject.Properties["includeApps"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "includeTabs"))) { #optional property not found
            $IncludeTabs = $null
        } else {
            $IncludeTabs = $JsonParameters.PSobject.Properties["includeTabs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "includeSettings"))) { #optional property not found
            $IncludeSettings = $null
        } else {
            $IncludeSettings = $JsonParameters.PSobject.Properties["includeSettings"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "includeChannels"))) { #optional property not found
            $IncludeChannels = $null
        } else {
            $IncludeChannels = $JsonParameters.PSobject.Properties["includeChannels"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "includeMembers"))) { #optional property not found
            $IncludeMembers = $null
        } else {
            $IncludeMembers = $JsonParameters.PSobject.Properties["includeMembers"].value
        }

        $PSO = [PSCustomObject]@{
            "teamId" = ${TeamId}
            "teamName" = ${TeamName}
            "includeApps" = ${IncludeApps}
            "includeTabs" = ${IncludeTabs}
            "includeSettings" = ${IncludeSettings}
            "includeChannels" = ${IncludeChannels}
            "includeMembers" = ${IncludeMembers}
        }

        return $PSO
    }

}

