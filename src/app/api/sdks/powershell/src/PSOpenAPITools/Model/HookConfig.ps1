#
# SalesTim API
# The unified Microsoft Teams Governance API. Visit our [Tech Hub](https://developers.salestim.com/api/) for more information. 
# Version: 1.0.0
# Contact: support@salestim.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Webhook configuration

.PARAMETER Verb
Webhook configuration verb
.PARAMETER Url
Webhook configuration url
.PARAMETER ContentType
Webhook configuration content type
.PARAMETER Secret
Webhook configuration secret
.OUTPUTS

HookConfig<PSCustomObject>
#>

function Initialize-HookConfig {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Verb},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Url},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Secret}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => HookConfig' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "verb" = ${Verb}
            "url" = ${Url}
            "content_type" = ${ContentType}
            "secret" = ${Secret}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to HookConfig<PSCustomObject>

.DESCRIPTION

Convert from JSON to HookConfig<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

HookConfig<PSCustomObject>
#>
function ConvertFrom-JsonToHookConfig {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => HookConfig' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in HookConfig
        $AllProperties = ("verb", "url", "content_type", "secret")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "verb"))) { #optional property not found
            $Verb = $null
        } else {
            $Verb = $JsonParameters.PSobject.Properties["verb"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "url"))) { #optional property not found
            $Url = $null
        } else {
            $Url = $JsonParameters.PSobject.Properties["url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "content_type"))) { #optional property not found
            $ContentType = $null
        } else {
            $ContentType = $JsonParameters.PSobject.Properties["content_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "secret"))) { #optional property not found
            $Secret = $null
        } else {
            $Secret = $JsonParameters.PSobject.Properties["secret"].value
        }

        $PSO = [PSCustomObject]@{
            "verb" = ${Verb}
            "url" = ${Url}
            "content_type" = ${ContentType}
            "secret" = ${Secret}
        }

        return $PSO
    }

}

