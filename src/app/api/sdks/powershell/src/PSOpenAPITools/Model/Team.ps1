#
# SalesTim API
# The unified Microsoft Teams Governance API. Visit our [Tech Hub](https://developers.salestim.com/api/) for more information. 
# Version: 1.0.0
# Contact: support@salestim.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

A Microsoft Teams team.

.PARAMETER OdataContext
OData Context
.PARAMETER Id
Team ID
.PARAMETER CreatedDateTime
Team Created Date Time
.PARAMETER DisplayName
Team Display Name
.PARAMETER Description
Team Description
.PARAMETER InternalId
Team Internal ID
.PARAMETER Classification
Team Classification
.PARAMETER Specialization
Team Specialization
.PARAMETER Visibility
Team Visibility
.PARAMETER WebUrl
Team Web URL
.PARAMETER IsArchived
Team Is Archived
.PARAMETER IsMembershipLimitedToOwners
Team Is Membership Limited To Owners
.PARAMETER DiscoverySettings
No description available.
.PARAMETER MemberSettings
No description available.
.PARAMETER GuestSettings
No description available.
.PARAMETER MessagingSettings
No description available.
.PARAMETER FunSettings
No description available.
.OUTPUTS

Team<PSCustomObject>
#>

function Initialize-Team {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OdataContext},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CreatedDateTime},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisplayName},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InternalId},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Classification},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Specialization},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Visibility},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${WebUrl},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsArchived},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsMembershipLimitedToOwners},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${DiscoverySettings},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${MemberSettings},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${GuestSettings},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${MessagingSettings},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${FunSettings}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Team' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "@odata.context" = ${OdataContext}
            "id" = ${Id}
            "createdDateTime" = ${CreatedDateTime}
            "displayName" = ${DisplayName}
            "description" = ${Description}
            "internalId" = ${InternalId}
            "classification" = ${Classification}
            "specialization" = ${Specialization}
            "visibility" = ${Visibility}
            "webUrl" = ${WebUrl}
            "isArchived" = ${IsArchived}
            "isMembershipLimitedToOwners" = ${IsMembershipLimitedToOwners}
            "discoverySettings" = ${DiscoverySettings}
            "memberSettings" = ${MemberSettings}
            "guestSettings" = ${GuestSettings}
            "messagingSettings" = ${MessagingSettings}
            "funSettings" = ${FunSettings}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Team<PSCustomObject>

.DESCRIPTION

Convert from JSON to Team<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Team<PSCustomObject>
#>
function ConvertFrom-JsonToTeam {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Team' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Team
        $AllProperties = ("@odata.context", "id", "createdDateTime", "displayName", "description", "internalId", "classification", "specialization", "visibility", "webUrl", "isArchived", "isMembershipLimitedToOwners", "discoverySettings", "memberSettings", "guestSettings", "messagingSettings", "funSettings")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "@odata.context"))) { #optional property not found
            $OdataContext = $null
        } else {
            $OdataContext = $JsonParameters.PSobject.Properties["@odata.context"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "createdDateTime"))) { #optional property not found
            $CreatedDateTime = $null
        } else {
            $CreatedDateTime = $JsonParameters.PSobject.Properties["createdDateTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayName"))) { #optional property not found
            $DisplayName = $null
        } else {
            $DisplayName = $JsonParameters.PSobject.Properties["displayName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "internalId"))) { #optional property not found
            $InternalId = $null
        } else {
            $InternalId = $JsonParameters.PSobject.Properties["internalId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "classification"))) { #optional property not found
            $Classification = $null
        } else {
            $Classification = $JsonParameters.PSobject.Properties["classification"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "specialization"))) { #optional property not found
            $Specialization = $null
        } else {
            $Specialization = $JsonParameters.PSobject.Properties["specialization"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "visibility"))) { #optional property not found
            $Visibility = $null
        } else {
            $Visibility = $JsonParameters.PSobject.Properties["visibility"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "webUrl"))) { #optional property not found
            $WebUrl = $null
        } else {
            $WebUrl = $JsonParameters.PSobject.Properties["webUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isArchived"))) { #optional property not found
            $IsArchived = $null
        } else {
            $IsArchived = $JsonParameters.PSobject.Properties["isArchived"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isMembershipLimitedToOwners"))) { #optional property not found
            $IsMembershipLimitedToOwners = $null
        } else {
            $IsMembershipLimitedToOwners = $JsonParameters.PSobject.Properties["isMembershipLimitedToOwners"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "discoverySettings"))) { #optional property not found
            $DiscoverySettings = $null
        } else {
            $DiscoverySettings = $JsonParameters.PSobject.Properties["discoverySettings"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "memberSettings"))) { #optional property not found
            $MemberSettings = $null
        } else {
            $MemberSettings = $JsonParameters.PSobject.Properties["memberSettings"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "guestSettings"))) { #optional property not found
            $GuestSettings = $null
        } else {
            $GuestSettings = $JsonParameters.PSobject.Properties["guestSettings"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "messagingSettings"))) { #optional property not found
            $MessagingSettings = $null
        } else {
            $MessagingSettings = $JsonParameters.PSobject.Properties["messagingSettings"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "funSettings"))) { #optional property not found
            $FunSettings = $null
        } else {
            $FunSettings = $JsonParameters.PSobject.Properties["funSettings"].value
        }

        $PSO = [PSCustomObject]@{
            "@odata.context" = ${OdataContext}
            "id" = ${Id}
            "createdDateTime" = ${CreatedDateTime}
            "displayName" = ${DisplayName}
            "description" = ${Description}
            "internalId" = ${InternalId}
            "classification" = ${Classification}
            "specialization" = ${Specialization}
            "visibility" = ${Visibility}
            "webUrl" = ${WebUrl}
            "isArchived" = ${IsArchived}
            "isMembershipLimitedToOwners" = ${IsMembershipLimitedToOwners}
            "discoverySettings" = ${DiscoverySettings}
            "memberSettings" = ${MemberSettings}
            "guestSettings" = ${GuestSettings}
            "messagingSettings" = ${MessagingSettings}
            "funSettings" = ${FunSettings}
        }

        return $PSO
    }

}

