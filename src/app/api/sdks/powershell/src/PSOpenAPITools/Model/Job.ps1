#
# SalesTim API
# The unified Microsoft Teams Governance API. Visit our [Tech Hub](https://developers.salestim.com/api/) for more information. 
# Version: 1.0.0
# Contact: support@salestim.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

A job that performs some tasks asynchronously. See [https://developers.salestim.com/api/reference/Models/Job](https://developers.salestim.com/api/reference/Models/Job) for more information.

.PARAMETER Id
The job ID, auto-generated at creation
.PARAMETER Log
A collection of JobLogsEntry. See [https://developers.salestim.com/api/reference/Models/JobLogs](https://developers.salestim.com/api/reference/Models/JobLogs) for more information.
.PARAMETER Type
The job type (for instance `ProvisioningRequest`)
.PARAMETER Status
The job current status
.PARAMETER Progress
The job current progress
.PARAMETER VarData
The job data (for instance a `ProvisioningRequest` object)
.OUTPUTS

Job<PSCustomObject>
#>

function Initialize-Job {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Log},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("active", "waiting", "completed", "failed", "deleyed", "paused", "unknownFutureValue")]
        [String]
        ${Status},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Progress},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${VarData}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Job' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Progress -and $Progress -gt 100) {
          throw "invalid value for 'Progress', must be smaller than or equal to 100."
        }

        if ($Progress -and $Progress -lt 0) {
          throw "invalid value for 'Progress', must be greater than or equal to 0."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "log" = ${Log}
            "type" = ${Type}
            "status" = ${Status}
            "progress" = ${Progress}
            "data" = ${VarData}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Job<PSCustomObject>

.DESCRIPTION

Convert from JSON to Job<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Job<PSCustomObject>
#>
function ConvertFrom-JsonToJob {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Job' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Job
        $AllProperties = ("id", "log", "type", "status", "progress", "data")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "log"))) { #optional property not found
            $Log = $null
        } else {
            $Log = $JsonParameters.PSobject.Properties["log"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "progress"))) { #optional property not found
            $Progress = $null
        } else {
            $Progress = $JsonParameters.PSobject.Properties["progress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data"))) { #optional property not found
            $VarData = $null
        } else {
            $VarData = $JsonParameters.PSobject.Properties["data"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "log" = ${Log}
            "type" = ${Type}
            "status" = ${Status}
            "progress" = ${Progress}
            "data" = ${VarData}
        }

        return $PSO
    }

}

