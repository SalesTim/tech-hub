#
# SalesTim API
# The unified Microsoft Teams Governance API. Visit our [Tech Hub](https://developers.salestim.com/api/) for more information. 
# Version: 1.0.0
# Contact: support@salestim.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Channel of a Microsoft Teams team.

.PARAMETER Id
Team Channel ID
.PARAMETER CreatedDateTime
Team Channel Created Date Time
.PARAMETER DisplayName
Team Channel Display Name
.PARAMETER Description
Team Channel Description
.PARAMETER MembershipType
Team Channel Membership Type
.OUTPUTS

TeamChannel<PSCustomObject>
#>

function Initialize-TeamChannel {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CreatedDateTime},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisplayName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MembershipType}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => TeamChannel' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "createdDateTime" = ${CreatedDateTime}
            "displayName" = ${DisplayName}
            "description" = ${Description}
            "membershipType" = ${MembershipType}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to TeamChannel<PSCustomObject>

.DESCRIPTION

Convert from JSON to TeamChannel<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

TeamChannel<PSCustomObject>
#>
function ConvertFrom-JsonToTeamChannel {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => TeamChannel' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in TeamChannel
        $AllProperties = ("id", "createdDateTime", "displayName", "description", "membershipType")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "createdDateTime"))) { #optional property not found
            $CreatedDateTime = $null
        } else {
            $CreatedDateTime = $JsonParameters.PSobject.Properties["createdDateTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayName"))) { #optional property not found
            $DisplayName = $null
        } else {
            $DisplayName = $JsonParameters.PSobject.Properties["displayName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "membershipType"))) { #optional property not found
            $MembershipType = $null
        } else {
            $MembershipType = $JsonParameters.PSobject.Properties["membershipType"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "createdDateTime" = ${CreatedDateTime}
            "displayName" = ${DisplayName}
            "description" = ${Description}
            "membershipType" = ${MembershipType}
        }

        return $PSO
    }

}

