#
# SalesTim API
# The unified Microsoft Teams Governance API. Visit our [Tech Hub](https://developers.salestim.com/api/) for more information. 
# Version: 1.0.0
# Contact: support@salestim.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Properties of the new team that will be created by the provisioning job.

.PARAMETER NamingConventionWithTags
Defines the naming convention for the new team name (With the tags HTML representation).
.PARAMETER EmailConventionWithTags
Defines the naming convention for the email associated with the underlying group of the new team name (With the tags HTML representation).
.PARAMETER DescriptionConventionWithTags
Defines the naming convention for the new team description (With the tags HTML representation).
.PARAMETER WelcomeMessageConventionWithTags
Defines the naming convention for the new team welcome message (With the tags HTML representation).
.PARAMETER NamingConvention
Defines the naming convention for the new team name (Without the tags HTML representation).
.PARAMETER EmailConvention
Defines the naming convention for the email associated with the underlying group of the new team name (Without the tags HTML representation).
.PARAMETER DescriptionConvention
Defines the naming convention for the new team description (Without the tags HTML representation).
.PARAMETER WelcomeMessageConvention
Defines the naming convention for the new team welcome message (Without the tags HTML representation).
.PARAMETER DefaultName
Defines the default team name presented to end-users in the new team provisioning form.
.PARAMETER DefaultDescription
Defines the default team description presented to end-users in the new team provisioning form.
.PARAMETER DefaultWelcomeMessage
Defines the default team welcome message presented to end-users in the new team provisioning form.
.PARAMETER TeamPrivacy
Defines the new team privacy level.
.PARAMETER AddRequesterAsTeamOwner
Defines if the requester of the new team should be invited as a team owner or just as a team member.
.OUTPUTS

CatalogTemplateNewTeam<PSCustomObject>
#>

function Initialize-CatalogTemplateNewTeam {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NamingConventionWithTags},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EmailConventionWithTags},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DescriptionConventionWithTags},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${WelcomeMessageConventionWithTags},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NamingConvention},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EmailConvention},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DescriptionConvention},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${WelcomeMessageConvention},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DefaultName},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DefaultDescription},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DefaultWelcomeMessage},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("public", "private", "unknownFutureValue")]
        [String]
        ${TeamPrivacy},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AddRequesterAsTeamOwner}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CatalogTemplateNewTeam' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "namingConventionWithTags" = ${NamingConventionWithTags}
            "emailConventionWithTags" = ${EmailConventionWithTags}
            "descriptionConventionWithTags" = ${DescriptionConventionWithTags}
            "welcomeMessageConventionWithTags" = ${WelcomeMessageConventionWithTags}
            "namingConvention" = ${NamingConvention}
            "emailConvention" = ${EmailConvention}
            "descriptionConvention" = ${DescriptionConvention}
            "welcomeMessageConvention" = ${WelcomeMessageConvention}
            "defaultName" = ${DefaultName}
            "defaultDescription" = ${DefaultDescription}
            "defaultWelcomeMessage" = ${DefaultWelcomeMessage}
            "teamPrivacy" = ${TeamPrivacy}
            "addRequesterAsTeamOwner" = ${AddRequesterAsTeamOwner}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CatalogTemplateNewTeam<PSCustomObject>

.DESCRIPTION

Convert from JSON to CatalogTemplateNewTeam<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CatalogTemplateNewTeam<PSCustomObject>
#>
function ConvertFrom-JsonToCatalogTemplateNewTeam {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CatalogTemplateNewTeam' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CatalogTemplateNewTeam
        $AllProperties = ("namingConventionWithTags", "emailConventionWithTags", "descriptionConventionWithTags", "welcomeMessageConventionWithTags", "namingConvention", "emailConvention", "descriptionConvention", "welcomeMessageConvention", "defaultName", "defaultDescription", "defaultWelcomeMessage", "teamPrivacy", "addRequesterAsTeamOwner")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "namingConventionWithTags"))) { #optional property not found
            $NamingConventionWithTags = $null
        } else {
            $NamingConventionWithTags = $JsonParameters.PSobject.Properties["namingConventionWithTags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "emailConventionWithTags"))) { #optional property not found
            $EmailConventionWithTags = $null
        } else {
            $EmailConventionWithTags = $JsonParameters.PSobject.Properties["emailConventionWithTags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "descriptionConventionWithTags"))) { #optional property not found
            $DescriptionConventionWithTags = $null
        } else {
            $DescriptionConventionWithTags = $JsonParameters.PSobject.Properties["descriptionConventionWithTags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "welcomeMessageConventionWithTags"))) { #optional property not found
            $WelcomeMessageConventionWithTags = $null
        } else {
            $WelcomeMessageConventionWithTags = $JsonParameters.PSobject.Properties["welcomeMessageConventionWithTags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "namingConvention"))) { #optional property not found
            $NamingConvention = $null
        } else {
            $NamingConvention = $JsonParameters.PSobject.Properties["namingConvention"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "emailConvention"))) { #optional property not found
            $EmailConvention = $null
        } else {
            $EmailConvention = $JsonParameters.PSobject.Properties["emailConvention"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "descriptionConvention"))) { #optional property not found
            $DescriptionConvention = $null
        } else {
            $DescriptionConvention = $JsonParameters.PSobject.Properties["descriptionConvention"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "welcomeMessageConvention"))) { #optional property not found
            $WelcomeMessageConvention = $null
        } else {
            $WelcomeMessageConvention = $JsonParameters.PSobject.Properties["welcomeMessageConvention"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defaultName"))) { #optional property not found
            $DefaultName = $null
        } else {
            $DefaultName = $JsonParameters.PSobject.Properties["defaultName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defaultDescription"))) { #optional property not found
            $DefaultDescription = $null
        } else {
            $DefaultDescription = $JsonParameters.PSobject.Properties["defaultDescription"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defaultWelcomeMessage"))) { #optional property not found
            $DefaultWelcomeMessage = $null
        } else {
            $DefaultWelcomeMessage = $JsonParameters.PSobject.Properties["defaultWelcomeMessage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "teamPrivacy"))) { #optional property not found
            $TeamPrivacy = $null
        } else {
            $TeamPrivacy = $JsonParameters.PSobject.Properties["teamPrivacy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "addRequesterAsTeamOwner"))) { #optional property not found
            $AddRequesterAsTeamOwner = $null
        } else {
            $AddRequesterAsTeamOwner = $JsonParameters.PSobject.Properties["addRequesterAsTeamOwner"].value
        }

        $PSO = [PSCustomObject]@{
            "namingConventionWithTags" = ${NamingConventionWithTags}
            "emailConventionWithTags" = ${EmailConventionWithTags}
            "descriptionConventionWithTags" = ${DescriptionConventionWithTags}
            "welcomeMessageConventionWithTags" = ${WelcomeMessageConventionWithTags}
            "namingConvention" = ${NamingConvention}
            "emailConvention" = ${EmailConvention}
            "descriptionConvention" = ${DescriptionConvention}
            "welcomeMessageConvention" = ${WelcomeMessageConvention}
            "defaultName" = ${DefaultName}
            "defaultDescription" = ${DefaultDescription}
            "defaultWelcomeMessage" = ${DefaultWelcomeMessage}
            "teamPrivacy" = ${TeamPrivacy}
            "addRequesterAsTeamOwner" = ${AddRequesterAsTeamOwner}
        }

        return $PSO
    }

}

